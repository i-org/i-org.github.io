<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>爱编</title>
    <description>第一种国际化编程语言</description>
    <link>http://i-org.ga/</link>
    <atom:link href="http://i-org.ga/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>爱编设计</title>
        <description>&lt;p&gt;&lt;img src=&quot;/static/i-small.png&quot; alt=&quot;i-org-logo-min&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;爱编系统设定&lt;/h1&gt;

&lt;p&gt;状态含义：●完成 ■待测试 ◆被认领开发中 ★计划&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;运行机制&lt;/h3&gt;

&lt;p&gt;为提高交互环境的运行速度，文件载入可根据设定的编码和方言类型，自动调用相应的方言 解析器&lt;/p&gt;

&lt;p&gt;头部指定方言环境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;i-zh-jobinson 表示使用的是 &lt;em&gt;爱编-中文-黑传说版&lt;/em&gt; 的方言环境&lt;/li&gt;
  &lt;li&gt;i-en-jobinson 表示使用的是 &lt;em&gt;爱编-英文-黑传说版&lt;/em&gt; 的方言环境&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;默认至少两个编译方向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;编译为js&lt;/li&gt;
  &lt;li&gt;编译为二进制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本核心要尽可能精简小巧，其他的功能以扩展提供，以减少维护成本，提高核心稳定度。不能像通链那样 大而全。&lt;/p&gt;

&lt;p&gt;类似 c 和 lua的关系，c的稳健精简利于lua的扩展。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;语法设定&lt;/h3&gt;

&lt;p&gt;兼容键盘&lt;/p&gt;

&lt;p&gt;手写情况下，括号类型有两种比较容易识别：大括号&lt;code&gt;{}&lt;/code&gt;和中括号&lt;code&gt;[]&lt;/code&gt;，其他的都较容易混淆，比如： &lt;code&gt;()&lt;/code&gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;，右括号和右尖号容易和 &lt;em&gt;7&lt;/em&gt; 混淆。&lt;/p&gt;

&lt;p&gt;手写时，大括号可以一笔完成，而中括号需要两笔，所以，一般更应该采用大括号&lt;code&gt;{}&lt;/code&gt;！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;用于表达宏？&lt;/p&gt;

&lt;p&gt;标识符最好能简化到类似 html的三个 &lt;code&gt;&amp;lt; &amp;gt; &amp;amp;&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;功能系统&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;首.尾系统&lt;/li&gt;
  &lt;li&gt;类型设定系统：可选&lt;/li&gt;
  &lt;li&gt;宏&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;统筹法系统（有必要么？）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;实时解析器&lt;/li&gt;
  &lt;li&gt;内建编译器&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;语法设定&lt;/h2&gt;

&lt;p&gt;TODO: 语法设定仍然需要完善
检验：如何原文表述自己&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;基本形式设定&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;成对标识：成对标识方便代码结构显示和处理。
设定：全角大括号 &lt;code&gt;｛｝&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;｛ ｛
｝ ｝
&amp;amp;  &amp;#38; &amp;amp;  这个半角&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;前置标识表达式：全部使用全角符号。设定：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  ｛操作 内容｝
    
  ｛&amp;lt;命令名&amp;gt;+&amp;lt;操作选定&amp;gt;+&amp;lt;操作目标&amp;gt;+&amp;lt;结果筛选参数&amp;gt;｝
  ｛&amp;lt;function&amp;gt;+&amp;lt;operation&amp;gt;+[target]+&amp;lt;option&amp;gt;｝
            
  ｛设函数  函数名 ｛甲参数 乙参数 &amp;amp;可选参数 &amp;amp;关键字式参数｝｛函数内容｝｝
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注释方式：对称符号，写的时候繁琐了点，但界限明显。简符码式注释？（链码用的就是此类）html式注释？&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  \*  *\
  ※   太复杂，和键盘不兼容
  ;;
  \
  /
  //
  &amp;lt;!--- 注释 ---&amp;gt;
  ｛！-- 注释 --｝
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;字符设定：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  英文字母：a b c d e f g h i j k l m n o p q r s t u v w s y z
  对应
  中文笔画：横竖撇奈 竖直弯勾
  ㇐ ㇑ ㇓ ㇏㇔ ㇕ ㇖ ㇗ ㇘ ㇙ ㇚ ㇛ ㇜
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;命名机制：
实际上后台是以数字形式命名，前台使用的是符号语义化的语言。以数字名字作为爱编 标口（标准接口），比如：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  say == 001 == 说
  defun == 002 == 设
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;应用的名位规则：以应用创建时间来作为起始，自动生成。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;命名约定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;文件头部设定&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;※ -*- coding: utf-8 il:zh-jobinson -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;必须&lt;/strong&gt;：在源码文件开头声明设定所使用语言版本&lt;/p&gt;

&lt;p&gt;各语言标识对应：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;中文：
zh-jobinson  语言设计者黑传说常用的中文编程词汇
zh-dao 　　  道教用语版
zh-fo 　　   佛教用语版
zh-wenyan    文言文版

英文：
en-jobinson 　　语言设计者黑传说常用的英文编程词汇
en-commonlisp 　通链版词汇
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设定创建时间：&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下面可参考神编和scheme，尽可能精炼&lt;/p&gt;

&lt;h2 id=&quot;meta-operators&quot;&gt;元操作符： meta operators&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;原样    quote&lt;/li&gt;
  &lt;li&gt;比较    equal&lt;/li&gt;
  &lt;li&gt;元否    atom&lt;/li&gt;
  &lt;li&gt;取首    first&lt;/li&gt;
  &lt;li&gt;取余    rest&lt;/li&gt;
  &lt;li&gt;拼凑    construct&lt;/li&gt;
  &lt;li&gt;假设    condition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;元操作符生成基本操作符&lt;/p&gt;

&lt;h2 id=&quot;basic-operators&quot;&gt;基本操作符 basic operators&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;命名   label  代码块级别&lt;/li&gt;
  &lt;li&gt;标记   tag  代码块内&lt;/li&gt;
  &lt;li&gt;跳转&lt;/li&gt;
  &lt;li&gt;指定   let&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;交互环境用的基本操作符&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;捕获  catch&lt;/li&gt;
  &lt;li&gt;抛出  throw&lt;/li&gt;
  &lt;li&gt;必运行 &lt;/li&gt;
  &lt;li&gt;读    read&lt;/li&gt;
  &lt;li&gt;写    write&lt;/li&gt;
  &lt;li&gt;运行  eval  相对于cl的eval-when&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本操作符生成其他内置函数和机制&lt;/p&gt;

&lt;h2 id=&quot;begin-operators&quot;&gt;常用操作符 begin operators&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;设 defun&lt;/li&gt;
  &lt;li&gt;重复 loop&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-7&quot;&gt;数据类型：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;判断：真 无 假  booleans T nil F&lt;/li&gt;
  &lt;li&gt;字符：  strings  字串&lt;/li&gt;
  &lt;li&gt;数字:  numbers&lt;/li&gt;
  &lt;li&gt;数列:  lists   ｛｝&lt;/li&gt;
  &lt;li&gt;:tuples&lt;/li&gt;
  &lt;li&gt;:closures&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;:continuations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文件 streams&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数： functions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;名讳 symbols&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;错误信息： errors 提示 prompts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-8&quot;&gt;常用函数：&lt;/h2&gt;

&lt;h3 id=&quot;section-9&quot;&gt;条件结构：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;若 if &lt;/li&gt;
  &lt;li&gt;与 and &lt;/li&gt;
  &lt;li&gt;或 or&lt;/li&gt;
  &lt;li&gt;非 not&lt;/li&gt;
  &lt;li&gt;当 cond&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-10&quot;&gt;流程控制&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;标识&lt;/li&gt;
  &lt;li&gt;必然运行&lt;/li&gt;
  &lt;li&gt;然后 接下去干什么——包括跳转到、跳出&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-11&quot;&gt;数据操作：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;数据类型判断&lt;/li&gt;
  &lt;li&gt;数据转换&lt;/li&gt;
  &lt;li&gt;数据遍历&lt;/li&gt;
  &lt;li&gt;数据提取&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-12&quot;&gt;赋值&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;设 set&lt;/li&gt;
  &lt;li&gt;获取值 get-value&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-13&quot;&gt;前置标识表达式操作&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;构建 cons&lt;/li&gt;
  &lt;li&gt;取首 first&lt;/li&gt;
  &lt;li&gt;取余 rest&lt;/li&gt;
  &lt;li&gt;判断是否为数列 consp ?cons&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-14&quot;&gt;函数构建&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;定义函数 defun&lt;/li&gt;
  &lt;li&gt;省名函数 lambda&lt;/li&gt;
  &lt;li&gt;局部赋值 let&lt;/li&gt;
  &lt;li&gt;比较 =&lt;/li&gt;
  &lt;li&gt;类型设定 type&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;error-prompt-&quot;&gt;提醒处理  error prompt 一般用于提示出错信息&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;提示 prompt  （error放入此处）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vector&quot;&gt;矢量 vector&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;创建&lt;/li&gt;
  &lt;li&gt;数据位置&lt;/li&gt;
  &lt;li&gt;矢量否？ vector?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-15&quot;&gt;文件操作&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;逐字读取 read-byte&lt;/li&gt;
  &lt;li&gt;输出为文件&lt;/li&gt;
  &lt;li&gt;打开文件 open&lt;/li&gt;
  &lt;li&gt;关闭文件 close&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-16&quot;&gt;时间操作&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;获得时间 get-time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-17&quot;&gt;数学操作&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;加 add&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;减 subtract&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;× 乘 * multiply&lt;/li&gt;
  &lt;li&gt;/  除 divide&lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;大于 greater?&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&amp;lt;  小于 less?&lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;=  大于等于 greater-than-or-equal-to?&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&amp;lt;=  小于等于 less-than-or-equal-to?&lt;/li&gt;
  &lt;li&gt;判断是否是数字 number?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-18&quot;&gt;二进制操作&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;进制转换 &lt;/li&gt;
  &lt;li&gt;取位&lt;/li&gt;
  &lt;li&gt;换位&lt;/li&gt;
  &lt;li&gt;计算（加 减 乘 除等）&lt;/li&gt;
  &lt;li&gt;比较&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-19&quot;&gt;统筹法系统&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;抽象方法 defgeneric&lt;/li&gt;
  &lt;li&gt;方法 defmethod&lt;/li&gt;
  &lt;li&gt;抽象类 defclass&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-20&quot;&gt;代码示例&lt;/h2&gt;

&lt;p&gt;爱编 指定 
+ 用语模板——用于适应各种编程习惯，无论怎么变，都能变成标准的
+ 编译模板——用于适应各种应用，比如有的对浮点精度要求高，可在此设定&lt;/p&gt;

&lt;p&gt;解析器 基本函数&lt;/p&gt;

&lt;p&gt;转码，运行，使用规则，运行机制，调用插件&lt;/p&gt;

&lt;p&gt;前置标识 成对括号&lt;/p&gt;

&lt;p&gt;代码示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;｛！国别编号：黑传说版语法｝
｛
  ｛／／程序基本信息设定
     ｛／／程序基本信息｝ 
     ｛／／导入模块｝
     ｛／／导出模块｝
   ｝
  ｛／／程序正文 

     ｛设 天  ｛高，长，宽｝
         ｛曰 “天地玄黄”｝
         ｛× ｛× 高 ∞｝｛× 长 ∞｝｛× 宽 ∞｝｝
      ｝
  ｝
｝
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;｛天 ｛10 20 30｝｝
&amp;gt; 天地玄黄
&amp;gt; ∞
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;条件：一个条件或多个条件都这样！不用分 if else cons when&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;｛当 ｛｛条件1｝ ｛对应程序1｝｝
         ｛｛条件2｝ ｛对应程序2｝｝
         ｛其他｝
｝
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;循环&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;｛循环 ｛参数名 递增｛范围 1 2｝｝｛循环内容｝｝

｛设 递增 ｛数｝ ｛＋ 数 1｝｝
｛设 参数名 数｝
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Wed, 2014 Oct 29 18:29:59 +0800</pubDate>
        <link>http://i-org.ga/%E8%AF%B4%E6%98%8E/2014/10/29/%E7%88%B1%E7%BC%96%E8%AE%BE%E8%AE%A1/</link>
        <guid isPermaLink="true">http://i-org.ga/%E8%AF%B4%E6%98%8E/2014/10/29/%E7%88%B1%E7%BC%96%E8%AE%BE%E8%AE%A1/</guid>
      </item>
    
      <item>
        <title>关于爱编</title>
        <description>&lt;p&gt;&lt;img src=&quot;/static/i-org-standard.png&quot; alt=&quot;i-org-logo-min&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;open-source-internationl-programing-language&quot;&gt;&lt;strong&gt;爱编 Open Source Internationl Programing Language&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;惠,爱也。——《尔雅》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;编程语言世界通用化&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用本土语言编程&lt;/li&gt;
  &lt;li&gt;任何语种代码都自动显示为本土语言代码&lt;/li&gt;
  &lt;li&gt;等效且沟通无障碍&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ambition&quot;&gt;我们的目标 Ambition：&lt;/h3&gt;

&lt;p&gt;让世界上的每个种族、文化背景的人，都可以使用其最熟悉的名词、术语、语法、工具，快速地写出适合自己需求的代码；而且，这些代码在不同的语言环境下的效果都是无差别的。&lt;/p&gt;

&lt;p&gt;I programming language explores to program with any idiom and character system in the world.&lt;/p&gt;

&lt;p&gt;With your familiar terminology, you can easily write your code, which is neat translated into any race, any religion, any cultrue background… &lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;实例 Example：&lt;/h3&gt;

&lt;p&gt;本地语言编程，效果等价：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; print： “天地玄黄”
&amp;gt; 曰： “天地玄黄”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内文翻译：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; print： “hello world”
&amp;gt; print： “天地玄黄”
&amp;gt; 曰： “hello world”
&amp;gt; 曰： “天地玄黄”
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;to-be-fullfilled&quot;&gt;要达成的具体目标 To be fullfilled：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;形成一个各种语种的语法规范&lt;/li&gt;
  &lt;li&gt;有一个可写简单应用的编程语言&lt;/li&gt;
  &lt;li&gt;不同语种代码简单相互翻译的机制：只需要手动简单翻译变量名即可。内置函数名自动翻译，特定语言的函数名内名显示（如有翻译方案，则自动翻译）！&lt;/li&gt;
  &lt;li&gt;计划初期实现中、英、佛、道以及发起者版&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;perspective&quot;&gt;远期目标 Perspective：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;形成一整套覆盖全语种的语法标准，作为其他编程语言支持国际化编程的参考。&lt;/li&gt;
  &lt;li&gt;更大目的是促进现存的各编程语言注重国际化、跨语种的支持。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;we-need-help&quot;&gt;我们需要 We Need Help：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;更多的合作者：包括编程人员参与程序实现，各种语言和文化背景精通者参与翻译。&lt;/li&gt;
  &lt;li&gt;更多的意见建议者&lt;/li&gt;
  &lt;li&gt;更多的宣传者，学习者&lt;/li&gt;
  &lt;li&gt;更多的支持者&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;background&quot;&gt;项目提出背景 Background：&lt;/h3&gt;
&lt;p&gt;现有编程语言的不足：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;学习效率不足&lt;/strong&gt;：非母语的编程语言，对学习者非常的不友好！曾见过一个人，母语学习通链（common lisp），仅仅3周看完一本实战，2月变成自己拿手工具。而作为非母语的学习者，则很难有三周能够搞定的，更何况还要应付各种蛋疼的翻译。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;编写效率有限&lt;/strong&gt;：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;因输入设备演进带来的问题：这绝大部分是英文字母固有的问题。&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;在小键盘平台上，英文键盘输入困难（字母多，键盘小，易出错——个人曾经用手机连续写码三天，深受其害，效率还不到平时一成）、手写识别率低，大大影响到输入的效率。&lt;/li&gt;
          &lt;li&gt;现有主流编程语言没有考虑到流行的新输入设备，使用了一些不太方便新输入设备的语法设定，比如python使用缩进，在手写系统里，很难有效区分。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;制约生产力形成：非母语的软接口名字难于理解，提升熟悉接口难度，影响编写效率。
 比如，我们经常可以看到编码的时候，需要不断翻阅英文的接口手册和中英翻译字典，这严重制约了生产效率。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;由于学习效率限制，使得对各种更新，很难保持应有的了解，尤其是非专业领域的人员，从而影响到日常的代码编写。
 也由于学习效率的不足，严重影响使用者接触新领域。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;交流障碍&lt;/strong&gt;：为了学习、提高、推广、测试、反馈，编程人员免不了要进行各种交流。
但编程人员之间代码交流，往往需要借用第三方语言——英语，而不是他们自己最熟悉最娴熟的语言，这相当于排斥几十亿非英语世界的人。
在这个全球文化大交流、大融合的时代，这种行为是逆潮流、狭隘、封闭、倒退的英文中心主义！&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;需求：&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;时代呼唤新的编程语言！！！&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;全民编程时代：编码作为现代生活的基本技能，需要更简单、更易掌握的编程语言。&lt;/li&gt;
  &lt;li&gt;专业领域需要更简单、易掌握的编程语言，使得可以把更多心思放在专业领域。&lt;/li&gt;
  &lt;li&gt;适应更多输入设备的需要。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;所受影响&lt;/h3&gt;

&lt;h4 id=&quot;section-2&quot;&gt;设计之初深受链码影响：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;快速成型&lt;/li&gt;
  &lt;li&gt;其基础技术标准完备稳定&lt;/li&gt;
  &lt;li&gt;需要改进的方面：因为历史原因，其用语晦涩，有些规则不统一，比如对矢量和散列表的定位语法不同： &lt;code&gt;ELT&lt;/code&gt; 是 &lt;code&gt;矢量名+位置&lt;/code&gt; ，而 &lt;code&gt;GETHASH&lt;/code&gt; 是 &lt;code&gt;位+散列表名&lt;/code&gt; 。&lt;/li&gt;
  &lt;li&gt;链码的缺陷是大而全，难掌握和维护&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;c-lua-javascript&quot;&gt;受C lua javascript影响&lt;/h4&gt;

&lt;p&gt;C的稳健和lua的灵活融合，不就是一个低耦合的通链么？而这种分拆，恰好规避了通链的 一体大全 的缺陷。&lt;/p&gt;

&lt;p&gt;另外，吸纳了 nodejs的 metalsmith的极小核心+全插件化的极简和强大扩展性模式。&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;解决方案 Solution：&lt;/h3&gt;
&lt;p&gt;为了解决上述提到的各种问题和需求，我们的解决方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;统一规则&lt;/strong&gt;：改进原有语法规则，统一化，简化&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;内建多语言规则&lt;/strong&gt;：不同语言通过内置中介转码器，自动编译成一样的机器码。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;内建同一语言多版本规则&lt;/strong&gt;：为了满足爱好者个人的自由喜好，以及解决本语言现在以及将来的历史名词沿革问题，对同一语种，可用多种版本，比如对于中文，可以有：现代汉语版、文言文版、火星文版、淘宝版、咆哮版、道教版、佛教版，黑传说版，某某人版等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;自动显示代码本地版本&lt;/strong&gt;：通过代码编辑器内建的自动翻译，不用通过第三方语言，直接实现以语言-语言间的互译。&lt;/li&gt;
  &lt;li&gt;最终达到的效果：可以 &lt;strong&gt;使用自己最熟悉的词汇系统来编程&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;application&quot;&gt;应用方向 Application：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;日常简单编程&lt;/li&gt;
  &lt;li&gt;中介语言，用于沟通其他编程语言&lt;/li&gt;
  &lt;li&gt;团队项目级快速编码&lt;/li&gt;
  &lt;li&gt;专业领域的快速编程&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;argument&quot;&gt;争论 Argument：&lt;/h3&gt;

&lt;p&gt;以实际成果来证明自己的正确性，而不是靠华美辞藻来证明自己装逼成功！
工作进度就是话语权。&lt;/p&gt;

&lt;h3 id=&quot;organization&quot;&gt;组织 Organization：&lt;/h3&gt;

&lt;p&gt;尔雅国际化编程语言促进会：一个致力于推动编程语言国际化的组织。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://i-org.ga&quot;&gt;【i.org】&lt;/a&gt; = International Programming Language Stardard Promotion Organization&lt;/p&gt;

&lt;h3 id=&quot;notes&quot;&gt;注 Notes：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;此项目已经设想多年，由于初始设计者本身一直较忙，断断续续积累，直到最近才开立这个项目，让诸位久违了，在此致歉。&lt;/li&gt;
  &lt;li&gt;此项目尽可能做到说明文字双语甚至多语翻译。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TODO:依语言设说明文件，而不是放在一页：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; readme-zh.md
 readme-en.md
 readme-jp.md
 ……
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 2014 Apr 25 01:38:33 +0800</pubDate>
        <link>http://i-org.ga/%E8%AF%B4%E6%98%8E/2014/04/25/%E5%85%B3%E4%BA%8E%E7%88%B1%E7%BC%96/</link>
        <guid isPermaLink="true">http://i-org.ga/%E8%AF%B4%E6%98%8E/2014/04/25/%E5%85%B3%E4%BA%8E%E7%88%B1%E7%BC%96/</guid>
      </item>
    
  </channel>
</rss>
