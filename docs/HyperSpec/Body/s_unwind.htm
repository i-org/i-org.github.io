<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Special Operator UNWIND-PROTECT</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="s_throw.htm">
<LINK REL=UP HREF="c_data_a.htm">
<LINK REL=NEXT HREF="v_nil.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="s_throw.htm">◀</A><A REL=UP HREF="c_data_a.htm">▲</A><A REL=NEXT HREF="v_nil.htm">▶</A></H1>

<HR>

<A NAME="unwind-protect"><I>Special Operator</I> <B>UNWIND-PROTECT</B></A> <P>
<p><b>●语法设定:</b><p>
 <P>

<B>unwind-protect</B> <I><I>protected-form</I> <I>cleanup-form</I><B>*</B></I> =&gt; <I><I>result</I><B>*</B></I><P>
 <P>
<p><b>●参数和值:</b><P>
 <P>
<I>protected-form</I>---a <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A>. <P>
<I>cleanup-form</I>---a <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A>. <P>
<I>results</I>---the <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> of the <I>protected-form</I>. <P>
<p><b>●详情:</b><P>
 <A REL=DEFINITION HREF="#unwind-protect"><B>unwind-protect</B></A> evaluates <I>protected-form</I> and guarantees that <I>cleanup-forms</I> are executed before <A REL=DEFINITION HREF="#unwind-protect"><B>unwind-protect</B></A> exits, whether it terminates normally or is aborted by a control transfer of some kind. <A REL=DEFINITION HREF="#unwind-protect"><B>unwind-protect</B></A> is intended to be used to make sure that certain side effects take place after the evaluation of <I>protected-form</I>. <P>
If a <A REL=DEFINITION HREF="26_glo_n.htm#non-local_exit"><I>non-local exit</I></A> occurs during execution of <I>cleanup-forms</I>, no special action is taken. The <I>cleanup-forms</I> of <A REL=DEFINITION HREF="#unwind-protect"><B>unwind-protect</B></A> are not protected by that <A REL=DEFINITION HREF="#unwind-protect"><B>unwind-protect</B></A>. <P>
<A REL=DEFINITION HREF="#unwind-protect"><B>unwind-protect</B></A> protects against all attempts to exit from <I>protected-form</I>, including <A REL=DEFINITION HREF="s_go.htm#go"><B>go</B></A>, <A REL=DEFINITION HREF="m_hand_1.htm#handler-case"><B>handler-case</B></A>, <A REL=DEFINITION HREF="m_ignore.htm#ignore-errors"><B>ignore-errors</B></A>, <A REL=DEFINITION HREF="m_rst_ca.htm#restart-case"><B>restart-case</B></A>, <A REL=DEFINITION HREF="s_ret_fr.htm#return-from"><B>return-from</B></A>, <A REL=DEFINITION HREF="s_throw.htm#throw"><B>throw</B></A>, and <A REL=DEFINITION HREF="m_w_smp_.htm#with-simple-restart"><B>with-simple-restart</B></A>. <P>
 Undoing of <A REL=DEFINITION HREF="26_glo_h.htm#handler"><I>handler</I></A> and <A REL=DEFINITION HREF="26_glo_r.htm#restart"><I>restart</I></A> <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>bindings</I></A> during an exit happens in parallel with the undoing of the bindings of <A REL=DEFINITION HREF="26_glo_d.htm#dynamic_variable"><I>dynamic variables</I></A> and <A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A> tags, in the reverse order in which they were established. The effect of this is that <I>cleanup-form</I> sees the same <A REL=DEFINITION HREF="26_glo_h.htm#handler"><I>handler</I></A> and <A REL=DEFINITION HREF="26_glo_r.htm#restart"><I>restart</I></A> <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>bindings</I></A>, as well as <A REL=DEFINITION HREF="26_glo_d.htm#dynamic_variable"><I>dynamic variable</I></A> <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>bindings</I></A> and <A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A> tags, as were visible when the <A 
REL=DEFINITION HREF="#unwind-protect"><B>unwind-protect</B></A> was entered.  <P>
<p><b>●例子:</b><P>
 
<PRE>
 (tagbody
   (let ((x 3))
     (unwind-protect    ;;下面这段必然运行，无视各种中断
       (if (numberp x) (go out))
       (print x)))
  out
   ...)
</PRE>
</b> When <A REL=DEFINITION HREF="s_go.htm#go"><B>go</B></A> is executed, the call to <A REL=DEFINITION HREF="f_wr_pr.htm#print"><B>print</B></A> is executed first, and then the transfer of control to the tag <b>out</b> is completed. <P>
<PRE>
 (defun dummy-function (x)
    (setq state 'running)
    (unless (numberp x) (throw 'abort 'not-a-number))
    (setq state (1+ x))) =&gt;  DUMMY-FUNCTION
 (catch 'abort (dummy-function 1)) =&gt;  2
 state =&gt;  2
 (catch 'abort (dummy-function 'trash)) =&gt;  NOT-A-NUMBER
 state =&gt;  RUNNING
 (catch 'abort (unwind-protect (dummy-function 'trash) 
                  (setq state 'aborted))) =&gt;  NOT-A-NUMBER
 state =&gt;  ABORTED
</PRE>
</b> <P>
The following code is not correct: <P>
<PRE>
 (unwind-protect
   (progn (incf *access-count*)
          (perform-access))
   (decf *access-count*))
</PRE>
</b> If an exit occurs before completion of <A REL=DEFINITION HREF="m_incf_.htm#incf"><B>incf</B></A>, the <A REL=DEFINITION HREF="m_incf_.htm#decf"><B>decf</B></A> <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A> is executed anyway, resulting in an incorrect value for <b>*access-count*</b>. The correct way to code this is as follows: <P>
<PRE>
 (let ((old-count *access-count*))
   (unwind-protect
     (progn (incf *access-count*)
            (perform-access))
     (setq *access-count* old-count)))
</PRE>
</b> <P>
 <P>
<PRE>
;;; The following returns 2.
 (block nil   
   (unwind-protect (return 1)
     (return 2)))
 
;;; The following has undefined consequences.
 (block a    
   (block b
     (unwind-protect (return-from a 1)
       (return-from b 2))))
 
;;; The following returns 2.
 (catch nil 
   (unwind-protect (throw nil 1)
     (throw nil 2)))
 
;;; The following has undefined consequences because the catch of B is 
;;; passed over by the first THROW, hence portable programs must assume 
;;; its dynamic extent is terminated.  The binding of the catch tag is not
;;; yet disestablished and therefore it is the target of the second throw.
 (catch 'a
   (catch 'b
     (unwind-protect (throw 'a 1)
       (throw 'b 2))))
 
;;; The following prints &quot;The inner catch returns :SECOND-THROW&quot;
;;; and then returns :OUTER-CATCH.
 (catch 'foo
         (format t &quot;The inner catch returns ~s.~%&quot;
                 (catch 'foo
                     (unwind-protect (throw 'foo :first-throw)
                         (throw 'foo :second-throw))))
         :outer-catch)
 
 
;;; The following returns 10. The inner CATCH of A is passed over, but 
;;; because that CATCH is disestablished before the THROW to A is executed,
;;; it isn't seen.
 (catch 'a
   (catch 'b
     (unwind-protect (1+ (catch 'a (throw 'b 1)))
       (throw 'a 10))))
 
 
;;; The following has undefined consequences because the extent of
;;; the (CATCH 'BAR ...) exit ends when the (THROW 'FOO ...)
;;; commences.
 (catch 'foo
   (catch 'bar
       (unwind-protect (throw 'foo 3)
         (throw 'bar 4)
         (print 'xxx))))
 
 
;;; The following returns 4; XXX is not printed.
;;; The (THROW 'FOO ...) has no effect on the scope of the BAR
;;; catch tag or the extent of the (CATCH 'BAR ...) exit.
 (catch 'bar
   (catch 'foo
       (unwind-protect (throw 'foo 3)
         (throw 'bar 4)
         (print 'xxx))))
 
 
;;; The following prints 5.
 (block nil
   (let ((x 5))
     (declare (special x))
     (unwind-protect (return)
       (print x))))          
</PRE>
</b> <P>
 <p><b>●受制于：</b> 无。</p>
 <P>
<p><b>●例外情况：</b> 无。</p>
 <P>
<p><b>●更多信息:</b><P>
 <P>
<A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A>, <A REL=DEFINITION HREF="s_go.htm#go"><B>go</B></A>, <A REL=DEFINITION HREF="m_hand_1.htm#handler-case"><B>handler-case</B></A>, <A REL=DEFINITION HREF="m_rst_ca.htm#restart-case"><B>restart-case</B></A>, <A REL=DEFINITION HREF="m_return.htm#return"><B>return</B></A>, <A REL=DEFINITION HREF="s_ret_fr.htm#return-from"><B>return-from</B></A>, <A REL=DEFINITION HREF="s_throw.htm#throw"><B>throw</B></A>, <A REL=CHILD HREF="03_a.htm">Section 3.1 (Evaluation)</A> <P>
<p><b>●说明：</b> 无。</p>
 <P>
<p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss152.htm">EXIT-EXTENT:MINIMAL</A><LI> <A REL=CHILD HREF="../Issues/iss151.htm">EXIT-EXTENT-AND-CONDITION-SYSTEM:LIKE-DYNAMIC-BINDINGS</A><P></UL><HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
