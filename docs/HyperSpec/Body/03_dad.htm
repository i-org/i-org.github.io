<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Section 3.4.1.4</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="03_dac.htm">
<LINK REL=UP HREF="03_da.htm">
<LINK REL=NEXT HREF="03_dada.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="03_dac.htm">◀</A><A REL=UP HREF="03_da.htm">▲</A><A REL=NEXT HREF="03_dada.htm">▶</A></H1>

<HR>

<H2>
3.4.1.4 Specifiers for keyword parameters</H2> <P>
 If <b>&amp;key</b> is present, all specifiers up to the next <A REL=DEFINITION HREF="26_glo_l.htm#lambda_list_keyword"><I>lambda list keyword</I></A> or the end of the <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> are keyword parameter specifiers. When keyword parameters are processed, the same arguments are processed that would be made into a <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> for a <A REL=DEFINITION HREF="26_glo_r.htm#rest_parameter"><I>rest parameter</I></A>. It is permitted to specify both <b>&amp;rest</b> and <b>&amp;key</b>. In this case the remaining arguments are used for both purposes; that is, all remaining arguments are made into a <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> for the <A REL=DEFINITION HREF="26_glo_r.htm#rest_parameter"><I>rest parameter</I></A>, and are also processed for the <b>&amp;key</b> parameters.  If <b>&amp;key</b> is specified, there must remain an even number of arguments; see <A REL=CHILD HREF="03_eaf.htm">Section 3.5.1.6 (Odd Number of Keyword Arguments)</A>.  These arguments are considered as pairs, the first argument in each pair being interpreted as a name and the second as the corresponding value. The first <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> of each pair must be a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A>; see <A REL=CHILD HREF="03_eae.htm">Section 3.5.1.5 (Invalid Keyword Arguments)</A>. The keyword parameter specifiers may optionally be followed by the <A REL=DEFINITION HREF="26_glo_l.htm#lambda_list_keyword"><I>lambda list keyword</I></A> <b>&amp;allow-other-keys</b>. <P>
In each keyword parameter specifier must be a name <I>var</I> for the parameter variable.  If the <I>var</I> appears alone or in a <b>(</b><I>var</I><b> </b><I>init-form</I><b>)</b> combination, the keyword name used when matching <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A> to <A REL=DEFINITION HREF="26_glo_p.htm#parameter"><I>parameters</I></A> is a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> in the <b>KEYWORD</b> package whose <A REL=DEFINITION HREF="26_glo_n.htm#name"><I>name</I></A> is the <A REL=DEFINITION HREF="26_glo_s.htm#same"><I>same</I></A> (under <A REL=DEFINITION HREF="f_stgeq_.htm#stringEQ"><B>string=</B></A>) as <I>var</I>'s. If the notation <b>((</b><I>keyword-name</I><b> </b><I>var</I><b>) </b><I>init-form</I><b>)</b> is used, then the keyword name used to match <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A> to <A REL=DEFINITION HREF="26_glo_p.htm#parameter"><I>parameters</I></A> is <I>keyword-name</I>, which may be a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> in any <A REL=DEFINITION HREF="26_glo_p.htm#package"><I>package</I></A>. (Of course, if it is not a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> in the <b>KEYWORD</b> package, it does not necessarily self-evaluate, so care must be taken when calling the function to make sure that normal evaluation still yields the keyword name.)  Thus <P>
<PRE>
 (defun foo (&amp;key radix (type 'integer)) ...)
</PRE>
</b> means exactly the same as <P>
<PRE>
 (defun foo (&amp;key ((:radix radix)) ((:type type) 'integer)) ...)
</PRE>
</b> <P>
The keyword parameter specifiers are, like all parameter specifiers, effectively processed from left to right. For each keyword parameter specifier, if there is an argument pair whose name matches that specifier's name (that is, the names are <A REL=DEFINITION HREF="f_eq.htm#eq"><B>eq</B></A>), then the parameter variable for that specifier is bound to the second item (the value) of that argument pair. If more than one such argument pair matches, the leftmost argument pair is used. If no such argument pair exists, then the <I>init-form</I> for that specifier is evaluated and the parameter variable is bound to that value (or to <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A> if no <I>init-form</I> was specified). <I>supplied-p-parameter</I> is treated as for <b>&amp;optional</b> parameters: it is bound to <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> if there was a matching argument pair, and to <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A> otherwise. <P>
Unless keyword argument checking is suppressed, an argument pair must a name matched by a parameter specifier; see <A REL=CHILD HREF="03_ead.htm">Section 3.5.1.4 (Unrecognized Keyword Arguments)</A>. <P>
If keyword argument checking is suppressed, then it is permitted for an argument pair to match no parameter specifier, and the argument pair is ignored, but such an argument pair is accessible through the <A REL=DEFINITION HREF="26_glo_r.htm#rest_parameter"><I>rest parameter</I></A> if one was supplied. The purpose of these mechanisms is to allow sharing of argument lists among several <A REL=DEFINITION HREF="26_glo_l.htm#lambda_expression"><I>lambda expressions</I></A> and to allow either the caller or the called <A REL=DEFINITION HREF="26_glo_l.htm#lambda_expression"><I>lambda expression</I></A> to specify that such sharing may be taking place. <P>
 Note that if <b>&amp;key</b> is present, a keyword argument of <b>:allow-other-keys</b> is always permitted---regardless of whether the associated value is <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> or <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>. However, if the value is <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>, other non-matching keywords are not tolerated (unless <b>&amp;allow-other-keys</b> was used). <P>
Furthermore, if the receiving argument list specifies a regular argument which would be flagged by <b>:allow-other-keys</b>, then <b>:allow-other-keys</b> has both its special-cased meaning (identifying whether additional keywords are permitted) and its normal meaning (data flow into the function in question).   <P>

 
<h2><A REL=CHILD HREF="03_dada.htm">
3.4.1.4.1 Suppressing Keyword Argument Checking</a></h2><p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss008.htm">ALLOW-OTHER-KEYS-NIL:PERMIT</A><LI> <A REL=CHILD HREF="../Issues/iss208.htm">KEYWORD-ARGUMENT-NAME-PACKAGE:ANY</A><LI> <A REL=CHILD HREF="../Issues/iss010.htm">ARGUMENT-MISMATCH-ERROR-AGAIN:CONSISTENT</A><LI> <A REL=CHILD HREF="../Issues/iss269.htm">PLIST-DUPLICATES:ALLOW</A><P></UL><HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
