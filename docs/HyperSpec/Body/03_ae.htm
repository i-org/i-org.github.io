<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Section 3.1.5</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="03_ad.htm">
<LINK REL=UP HREF="03_a.htm">
<LINK REL=NEXT HREF="03_af.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="03_ad.htm">◀</A><A REL=UP HREF="03_a.htm">▲</A><A REL=NEXT HREF="03_af.htm">▶</A></H1>

<HR>

<H2>
3.1.5 Shadowing</H2>  <P>
If two <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>forms</I></A> that <A REL=DEFINITION HREF="26_glo_e.htm#establish"><I>establish</I></A> <A REL=DEFINITION HREF="26_glo_l.htm#lexical_binding"><I>lexical bindings</I></A> with the same <A REL=DEFINITION HREF="26_glo_n.htm#name"><I>name</I></A> N are textually nested, then references to N within the inner <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A> refer to the <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> established by the inner <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A>; the inner <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> for N <A REL=DEFINITION HREF="26_glo_s.htm#shadow"><I>shadows</I></A> the outer <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> for N. Outside the inner <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A> but inside the outer one, references to N refer to the <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> established by the outer <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A>. For example: <P>
<PRE>
 (defun test (x z)
   (let ((z (* x 2)))
     (print z))
   z)
</PRE>
</b> The <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> of the variable <b>z</b> by <A REL=DEFINITION HREF="s_let_l.htm#let"><B>let</B></A> shadows the <A REL=DEFINITION HREF="26_glo_p.htm#parameter"><I>parameter</I></A> binding for the function <b>test</b>. The reference to the variable <b>z</b> in the <A REL=DEFINITION HREF="f_wr_pr.htm#print"><B>print</B></A> <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A> refers to the <A REL=DEFINITION HREF="s_let_l.htm#let"><B>let</B></A> binding. The reference to <b>z</b> at the end of the function <b>test</b> refers to the <A REL=DEFINITION HREF="26_glo_p.htm#parameter"><I>parameter</I></A> named <b>z</b>. <P>
Constructs that are lexically scoped act as if new names were generated for each <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> on each execution. Therefore, dynamic shadowing cannot occur. For example: <P>
<PRE>
 (defun contorted-example (f g x)
   (if (= x 0)
       (funcall f)
       (block here
          (+ 5 (contorted-example g
                                  #'(lambda () (return-from here 4))
                                  (- x 1))))))
</PRE>
</b> Consider the call <b>(contorted-example nil nil 2)</b>. This produces <b>4</b>. During the course of execution, there are three calls to <b>contorted-example</b>, interleaved with two blocks: <P>
<PRE>
 (contorted-example nil nil 2)
   (block here1 ...)
     (contorted-example nil #'(lambda () (return-from here1 4)) 1)
       (block here2 ...)
         (contorted-example #'(lambda () (return-from here1 4))
                            #'(lambda () (return-from here2 4))
                            0)
             (funcall f)
                    where f =&gt;  #'(lambda () (return-from here1 4))
                 (return-from here1 4)
</PRE>
</b> At the time the <b>funcall</b> is executed there are two <A REL=DEFINITION HREF="s_block.htm#block"><B>block</B></A> <A REL=DEFINITION HREF="26_glo_e.htm#exit_point"><I>exit points</I></A> outstanding, each apparently named <b>here</b>. The <A REL=DEFINITION HREF="s_ret_fr.htm#return-from"><B>return-from</B></A> <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A> executed as a result of the <b>funcall</b> operation refers to the outer outstanding <A REL=DEFINITION HREF="26_glo_e.htm#exit_point"><I>exit point</I></A> (here1), not the inner one (here2). It refers to that <A REL=DEFINITION HREF="26_glo_e.htm#exit_point"><I>exit point</I></A> textually visible at the point of execution of <A REL=DEFINITION HREF="s_fn.htm#function"><B>function</B></A> (here abbreviated by the <b>#'</b> syntax) that resulted in creation of the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> actually invoked by <A REL=DEFINITION HREF="f_funcal.htm#funcall"><B>funcall</B></A>. <P>
If, in this example, one were to change the <b>(funcall f)</b> to <b>(funcall g)</b>, then the value of the call <b>(contorted-example nil nil 2)</b> would be <b>9</b>. The value would change because <A REL=DEFINITION HREF="f_funcal.htm#funcall"><B>funcall</B></A> would cause the execution of <b>(return-from here</b>2<b> 4)</b>, thereby causing a return from the inner <A REL=DEFINITION HREF="26_glo_e.htm#exit_point"><I>exit point</I></A> (here2). When that occurs, the value <b>4</b> is returned from the middle invocation of <b>contorted-example</b>, <b>5</b> is added to that to get <b>9</b>, and that value is returned from the outer block and the outermost call to <b>contorted-example</b>. The point is that the choice of <A REL=DEFINITION HREF="26_glo_e.htm#exit_point"><I>exit point</I></A> returned from has nothing to do with its being innermost or outermost; rather, it depends on the lexical environment that is packaged up with a <A REL=DEFINITION HREF="26_glo_l.htm#lambda_expression"><I>lambda expression</I></A> when <A REL=DEFINITION HREF="s_fn.htm#function"><B>function</B></A> is executed. <P>
<HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
