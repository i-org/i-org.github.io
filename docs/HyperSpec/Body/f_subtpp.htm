<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Function SUBTYPEP</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="m_deftp.htm">
<LINK REL=UP HREF="c_types_.htm">
<LINK REL=NEXT HREF="f_tp_of.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="m_deftp.htm">◀</A><A REL=UP HREF="c_types_.htm">▲</A><A REL=NEXT HREF="f_tp_of.htm">▶</A></H1>

<HR>

<A NAME="subtypep"><I>Function</I> <B>SUBTYPEP</B></A> <P>
 <P>
<p><b>●语法设定:</b><p>
 <P>

<B>subtypep</B> <I>type-1 type-2 <b>&amp;optional</b> environment</I> =&gt; <I>subtype-p, valid-p</I><P>
 <P>
<p><b>●参数和值:</b><P>
 <P>
<I>type-1</I>---a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A>. <P>
<I>type-2</I>---a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A>. <P>
<I>environment</I>---an <A REL=DEFINITION HREF="26_glo_e.htm#environment"><I>environment</I></A> <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. The default is <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>, denoting the <A REL=DEFINITION HREF="26_glo_n.htm#null_lexical_environment"><I>null lexical environment</I></A> and the current <A REL=DEFINITION HREF="26_glo_g.htm#global_environment"><I>global environment</I></A>. <P>
<I>subtype-p</I>---a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<I>valid-p</I>---a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<p><b>●详情:</b><P>
 <P>
If <I>type-1</I> is a <A REL=DEFINITION HREF="26_glo_r.htm#recognizable_subtype"><I>recognizable subtype</I></A> of <I>type-2</I>, the first <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>value</I></A> is <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A>. Otherwise, the first <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>value</I></A> is <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>, indicating that either <I>type-1</I> is not a <A REL=DEFINITION HREF="26_glo_s.htm#subtype"><I>subtype</I></A> of <I>type-2</I>, or else <I>type-1</I> is a <A REL=DEFINITION HREF="26_glo_s.htm#subtype"><I>subtype</I></A> of <I>type-2</I> but is not a <A REL=DEFINITION HREF="26_glo_r.htm#recognizable_subtype"><I>recognizable subtype</I></A>. <P>
A second <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>value</I></A> is also returned indicating the `certainty' of the first <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>value</I></A>. If this value is <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A>, then the first value is an accurate indication of the <A REL=DEFINITION HREF="26_glo_s.htm#subtype"><I>subtype</I></A> relationship. (The second <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>value</I></A> is always <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> when the first <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>value</I></A> is <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A>.) <P>
The next figure summarizes the possible combinations of <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> that might result. <P>
<PRE>
Value 1  Value 2  Meaning                                               
<A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>     <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>     type-1 is definitely a <A REL=DEFINITION HREF="26_glo_s.htm#subtype">subtype</A> of type-2.             
<A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>    <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>     type-1 is definitely not a <A REL=DEFINITION HREF="26_glo_s.htm#subtype">subtype</A> of type-2.         
<A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>    <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>    <A REL=DEFINITION HREF="#subtypep">subtypep</A> could not determine the relationship,        
                  so type-1 might or might not be a <A REL=DEFINITION HREF="26_glo_s.htm#subtype">subtype</A> of type-2.  
</PRE>
<p><b>■图表 4-9.  Result possibilities for subtypep</B> <P>
 <P>
<A REL=DEFINITION HREF="#subtypep"><B>subtypep</B></A> is permitted to return the <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A> and <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A> only when at least one argument involves one of these <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A>: <B>and</B>, <B>eql</B>, the list form of <B>function</B>, <B>member</B>, <B>not</B>, <B>or</B>, <B>satisfies</B>, or <B>values</B>. (A <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> `involves' such a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> if, after being <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <I>expanded</I>, it contains that <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> in a position that would call for its meaning as a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> to be used.) One consequence of this is that if neither <I>type-1</I> nor <I>type-2</I> involves any of these <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A>, then <A REL=DEFINITION HREF="#subtypep"><B>subtypep</B></A> is obliged to determine the relationship accurately. In particular, <A REL=DEFINITION HREF="#subtypep"><B>subtypep</B></A> returns the <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> and <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> if the arguments are <A REL=DEFINITION HREF="f_equal.htm#equal"><B>equal</B></A> and do not involve any of these <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A>. <P>
<A REL=DEFINITION HREF="#subtypep"><B>subtypep</B></A> never returns a second value of <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A> when both <I>type-1</I> and <I>type-2</I> involve only the names in <A REL=DEFINITION HREF="04_bc.htm#standardizedatomictypespecs">Figure 4-2</A>, or names of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A> defined by <A REL=DEFINITION HREF="m_defstr.htm#defstruct"><B>defstruct</B></A>, <A REL=DEFINITION HREF="m_defi_5.htm#define-condition"><B>define-condition</B></A>, or <A REL=DEFINITION HREF="m_defcla.htm#defclass"><B>defclass</B></A>, or <A REL=DEFINITION HREF="26_glo_d.htm#derived_type"><I>derived types</I></A> that expand into only those names. While <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A> listed in <A REL=DEFINITION HREF="04_bc.htm#standardizedatomictypespecs">Figure 4-2</A> and names of <A REL=DEFINITION HREF="m_defcla.htm#defclass"><B>defclass</B></A> and <A REL=DEFINITION HREF="m_defstr.htm#defstruct"><B>defstruct</B></A> can in some cases be implemented as <A REL=DEFINITION HREF="26_glo_d.htm#derived_type"><I>derived types</I></A>, <A REL=DEFINITION HREF="#subtypep"><B>subtypep</B></A> regards them as primitive. <P>
The relationships between <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A> reflected by <A REL=DEFINITION HREF="#subtypep"><B>subtypep</B></A> are those specific to the particular implementation. For example, if an implementation supports only a single type of floating-point numbers, in that implementation <b>(subtypep 'float 'long-float)</b> returns the <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> and <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> (since the two <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A> are identical).  <P>
 For all <I>T1</I> and <I>T2</I> other than <b>*</b>, <b>(array </b><I>T1</I><b>)</b> and <b>(array </b><I>T2</I><b>)</b> are two different <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A> that always refer to the same sets of things if and only if they refer to <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>arrays</I></A> of exactly the same specialized representation, i.e., if <b>(upgraded-array-element-type '</b><I>T1</I><b>)</b> and <b>(upgraded-array-element-type '</b><I>T2</I><b>)</b> return two different <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A> that always refer to the same sets of <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>objects</I></A>. This is another way of saying that <b>`(array </b><I>type-specifier</I><b>)</b> and <b>`(array ,(upgraded-array-element-type '</b><I>type-specifier</I><b>))</b> refer to the same set of specialized <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>array</I></A> representations. For all <I>T1</I> and <I>T2</I> other than <b>*</b>, the intersection of <b>(array </b><I>T1</I><b>)</b> and <b>(array </b><I>T2</I><b>)</b> is the empty set if and only if they refer to <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>arrays</I></A> of different, distinct specialized representations. <P>
Therefore, <P>
<PRE>
 (subtypep '(array T1) '(array T2)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
</PRE>
</b> if and only if <P>
<PRE>
 (upgraded-array-element-type 'T1)  and
 (upgraded-array-element-type 'T2)  
</PRE>
</b> <P>
return two different <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A> that always refer to the same sets of <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>objects</I></A>. <P>
For all type-specifiers <I>T1</I> and <I>T2</I> other than <b>*</b>, <P>
<PRE>
 (subtypep '(complex T1) '(complex T2)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
</PRE>
</b> <P>
if: <P><ul><li>1.  <b>T1</b> is a <A REL=DEFINITION HREF="26_glo_s.htm#subtype"><I>subtype</I></A> of <b>T2</b>, or </li><li>2.  <b>(upgraded-complex-part-type '</b><I>T1</I><b>)</b> and <b>(upgraded-complex-part-type '</b><I>T2</I><b>)</b> return two different <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A> that always refer to the same sets of <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>objects</I></A>; in this case, <b>(complex </b><I>T1</I><b>)</b> and <b>(complex </b><I>T2</I><b>)</b> both refer to the same specialized representation. <P></li></ul>The <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> are <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A> and <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> otherwise. <P>
The form <P>
<PRE>
 (subtypep '(complex single-float) '(complex float))
</PRE>
</b> must return <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> in all implementations, but <P>
<PRE>
 (subtypep '(array single-float) '(array float))
</PRE>
</b> <P>
returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> only in implementations that do not have a specialized <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>array</I></A> representation for <A REL=DEFINITION HREF="26_glo_s.htm#single_float"><I>single floats</I></A> distinct from that for other <A REL=DEFINITION HREF="26_glo_f.htm#float"><I>floats</I></A>. <P>
 <P>
<p><b>●例子:</b><P>
 <P>
<PRE>
 (subtypep 'compiled-function 'function) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (subtypep 'null 'list) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (subtypep 'null 'symbol) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (subtypep 'integer 'string) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (subtypep '(satisfies dummy) nil) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>, <A REL=DEFINITION HREF="26_glo_i.htm#implementation-dependent">implementation-dependent</A>
 (subtypep '(integer 1 3) '(integer 1 4)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (subtypep '(integer (0) (0)) 'nil) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (subtypep 'nil '(integer (0) (0))) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (subtypep '(integer (0) (0)) '(member)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A> ;or <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>, <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (subtypep '(member) 'nil) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A> ;or <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>, <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (subtypep 'nil '(member)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A> ;or <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>, <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
</PRE>
</b> <P>
 Let <b>&lt;aet-x&gt;</b> and <b>&lt;aet-y&gt;</b> be two distinct <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A> that do not always refer to the same sets of <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>objects</I></A> in a given implementation, but for which <A REL=DEFINITION HREF="f_mk_ar.htm#make-array"><B>make-array</B></A>, will return an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> of the same <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>array</I></A> <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. <P>
Thus, in each case, <P>
<PRE>
  (subtypep (array-element-type (make-array 0 :element-type '&lt;aet-x&gt;))
            (array-element-type (make-array 0 :element-type '&lt;aet-y&gt;)))
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 
  (subtypep (array-element-type (make-array 0 :element-type '&lt;aet-y&gt;))
            (array-element-type (make-array 0 :element-type '&lt;aet-x&gt;)))
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
</PRE>
</b>  <P>
If <b>(array &lt;aet-x&gt;)</b> and <b>(array &lt;aet-y&gt;)</b> are different names for exactly the same set of <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>objects</I></A>, these names should always refer to the same sets of <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>objects</I></A>. That implies that the following set of tests are also true: <P>
<PRE>
 (subtypep '(array &lt;aet-x&gt;) '(array &lt;aet-y&gt;)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (subtypep '(array &lt;aet-y&gt;) '(array &lt;aet-x&gt;)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>, <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
</PRE>
</b> <P>
<p><b>●副作用:</b> None.
 <P>
<p><b>●受制于：</b> 无。</p>
 <P>
<p><b>●例外情况：</b> 无。</p>
 <P>
<p><b>●更多信息:</b><P>
 <P>
<h2><A REL=CHILD HREF="04_b.htm">Section 4.2 (Types)</A> <P>
<p><b>●说明:</b><P>
 <P>
 The small differences between the <A REL=DEFINITION HREF="#subtypep"><B>subtypep</B></A> specification for the <A REL=DEFINITION HREF="t_array.htm#array"><B>array</B></A> and <A REL=DEFINITION HREF="t_comple.htm#complex"><B>complex</B></A> types are necessary because there is no creation function for <A REL=DEFINITION HREF="26_glo_c.htm#complex"><I>complexes</I></A> which allows the specification of the resultant part type independently of the actual types of the parts. Thus in the case of the <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="t_comple.htm#complex"><B>complex</B></A>, the actual type of the parts is referred to, although a <A REL=DEFINITION HREF="26_glo_n.htm#number"><I>number</I></A> can be a member of more than one <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. For example, <b>17</b> is of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <b>(mod 18)</b> as well as <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <b>(mod 256)</b> and <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="t_intege.htm#integer"><B>integer</B></A>; and <b>2.3f5</b> is of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="t_short_.htm#single-float"><B>single-float</B></A> as well as <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="t_float.htm#float"><B>float</B></A>.  <P>
 <P>
<p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss015.htm">ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING</A><LI> <A REL=CHILD HREF="../Issues/iss335.htm">SUBTYPEP-TOO-VAGUE:CLARIFY-MORE</A><LI> <A REL=CHILD HREF="../Issues/iss334.htm">SUBTYPEP-ENVIRONMENT:ADD-ARG</A><P></UL><HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
