<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Section 22.3.7.2</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="22_cga.htm">
<LINK REL=UP HREF="22_cg.htm">
<LINK REL=NEXT HREF="22_cgc.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="22_cga.htm">◀</A><A REL=UP HREF="22_cg.htm">▲</A><A REL=NEXT HREF="22_cgc.htm">▶</A></H1>

<HR>

<H2>
22.3.7.2 Tilde Left-Bracket: Conditional Expression</H2>  <P>
<b>~[</b><I>str0</I><b>~;</b><I>str1</I><b>~;</b><I>...</I><b>~;</b><I>strn</I><b>~]</b> <P>
This is a set of control strings, called <I>clauses</I>, one of which is chosen and used. The clauses are separated by <b>~;</b> and the construct is terminated by <b>~]</b>. For example, <P>
<b>&quot;~[Siamese~;Manx~;Persian~] Cat&quot;</b> <P>
The <I>arg</I>th clause is selected, where the first clause is number 0. If a prefix parameter is given (as <b>~</b><I>n</I><b>[</b>), then the parameter is used instead of an argument. If <I>arg</I> is out of range then no clause is selected and no error is signaled. After the selected alternative has been processed, the control string continues after the <b>~]</b>. <P>
<b>~[</b><I>str0</I><b>~;</b><I>str1</I><b>~;</b><I>...</I><b>~;</b><I>strn</I><b>~:;</b><I>default</I><b>~]</b> has a default case. If the <I>last</I> <b>~;</b> used to separate clauses is <b>~:;</b> instead, then the last clause is an else clause that is performed if no other clause is selected. For example: <P>
<b>&quot;~[Siamese~;Manx~;Persian~:;Alley~] Cat&quot;</b> <P>
<b>~:[</b><I>alternative</I><b>~;</b><I>consequent</I><b>~]</b> selects the <I>alternative</I> control string if <I>arg</I> is <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>, and selects the <I>consequent</I> control string otherwise. <P>
<b>~@[</b><I>consequent</I><b>~]</b> tests the argument. If it is <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A>, then the argument is not used up by the <b>~[</b> command but remains as the next one to be processed, and the one clause <I>consequent</I> is processed. If the <I>arg</I> is <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>, then the argument is used up, and the clause is not processed. The clause therefore should normally use exactly one argument, and may expect it to be <A REL=DEFINITION HREF="26_glo_n.htm#non-nil"><I>non-nil</I></A>. For example: <P>
<PRE>
 (setq *print-level* nil *print-length* 5)
 (format nil
        &quot;~@[ print level = ~D~]~@[ print length = ~D~]&quot;
        *print-level* *print-length*)
=&gt;   &quot; print length = 5&quot;
</PRE>
</b> <P>
Note also that <P>
<PRE>
 (format stream &quot;...~@[str~]...&quot; ...)
==  (format stream &quot;...~:[~;~:*str~]...&quot; ...)
</PRE>
</b> <P>
The combination of <b>~[</b> and <b>#</b> is useful, for example, for dealing with English conventions for printing lists: <P>
<PRE>
 (setq foo &quot;Items:~#[ none~; ~S~; ~S and ~S~
           ~:;~@{~#[~; and~] ~S~^ ,~}~].&quot;)
 (format nil foo) =&gt;   &quot;Items: none.&quot;
 (format nil foo 'foo) =&gt;   &quot;Items: FOO.&quot;
 (format nil foo 'foo 'bar) =&gt;   &quot;Items: FOO and BAR.&quot;
 (format nil foo 'foo 'bar 'baz) =&gt;   &quot;Items: FOO, BAR, and BAZ.&quot;
 (format nil foo 'foo 'bar 'baz 'quux) =&gt;   &quot;Items: FOO, BAR, BAZ, and QUUX.&quot;
</PRE>
</b> <P>
<HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
