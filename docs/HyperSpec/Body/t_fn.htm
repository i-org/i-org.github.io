<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: System Class FUNCTION</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="t_ban.htm">
<LINK REL=UP HREF="c_types_.htm">
<LINK REL=NEXT HREF="t_cmpd_f.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="t_ban.htm">◀</A><A REL=UP HREF="c_types_.htm">▲</A><A REL=NEXT HREF="t_cmpd_f.htm">▶</A></H1>

<HR>

<A NAME="function"><I>System Class</I> <B>FUNCTION</B></A> <P>
 <P>
<p><b>●Class Precedence List:</b><P>
 <A REL=DEFINITION HREF="#function"><B>function</B></A>, <A REL=DEFINITION HREF="t_t.htm#t"><B>t</B></A> <P>
<p><b>●详情:</b><P>
 <P>
A <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> is an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> that represents code to be executed when an appropriate number of arguments is supplied. A <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> is produced by the <A REL=DEFINITION HREF="s_fn.htm#function"><B>function</B></A> <A REL=DEFINITION HREF="26_glo_s.htm#special_form"><I>special form</I></A>, the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="f_coerce.htm#coerce"><B>coerce</B></A>,   or the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="f_cmp.htm#compile"><B>compile</B></A>. A <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> can be directly invoked by using it as the first argument to <A REL=DEFINITION HREF="f_funcal.htm#funcall"><B>funcall</B></A>, <A REL=DEFINITION HREF="f_apply.htm#apply"><B>apply</B></A>, or <A REL=DEFINITION HREF="s_multip.htm#multiple-value-call"><B>multiple-value-call</B></A>. <P>
<P><B>Compound Type Specifier Kind:</B><P>
 <P>
Specializing. <P>
<P><B>Compound Type Specifier Syntax:</B><P>
 <P>

<B>function</B> <I>[arg-typespec [value-typespec]]</I><P>
 <P>
<PRE>
arg-typespec::= (typespec*  
                 [&amp;optional typespec*]  
                 [&amp;rest typespec]  
                 [&amp;key (keyword typespec)*]) 
</PRE>
 <P>
<P><B>Compound Type Specifier Arguments:</B><P>
 <P>
<I>typespec</I>---a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A>. <P>
<I>value-typespec</I>---a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A>. <P>
<P><B>Compound Type Specifier Description:</B><P>
 <P>
 <P>
  <P>
The list form of the <A REL=DEFINITION HREF="#function"><B>function</B></A> <I>type-specifier</I> can be used only for declaration and not for discrimination. Every element of this <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> is a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> that accepts arguments of the types specified by the <I>argj-types</I> and returns values that are members of the <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A> specified by <I>value-type</I>. The <b>&amp;optional</b>, <b>&amp;rest</b>, <b>&amp;key</b>,  and <b>&amp;allow-other-keys</b>  markers can appear in the list of argument types.  The <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> provided with <b>&amp;rest</b> is the <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> of each actual argument, not the <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> of the corresponding variable.  <P>
 The <b>&amp;key</b> parameters should be supplied as lists of the form <b>(</b><I>keyword</I><b> </b><I>type</I><b>)</b>. The <I>keyword</I> must be a valid keyword-name symbol as must be supplied in the actual arguments of a call.  This is usually a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> in the <b>KEYWORD</b> package but can be any <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A>.  When <b>&amp;key</b> is given in a <B>function</B> <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> <A REL=DEFINITION HREF="26_glo_l.htm#lambda_list"><I>lambda list</I></A>, the <A REL=DEFINITION HREF="26_glo_k.htm#keyword_parameter"><I>keyword parameters</I></A> given are exhaustive unless <b>&amp;allow-other-keys</b> is also present. <b>&amp;allow-other-keys</b> is an indication that other keyword arguments might actually be supplied and, if supplied, can be used. For example, the <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> of the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="f_mk_lis.htm#make-list"><B>make-list</B></A> could be declared as follows: <P>
<PRE>
 (function ((integer 0) &amp;key (:initial-element t)) list)
</PRE>
</b>  <P>
The <I>value-type</I> can be a <B>values</B> <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> in order to indicate the <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A> of <A REL=DEFINITION HREF="26_glo_m.htm#multiple_values"><I>multiple values</I></A>. <P>
 <P>
Consider a declaration of the following form: <P>
<PRE>
 (ftype (function (arg0-type arg1-type ...) val-type) f))
</PRE>
</b> <P>
Any <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A> <b>(f arg0 arg1 ...)</b> within the scope of that declaration is equivalent to the following: <P>
<PRE>
 (the val-type (f (the arg0-type arg0) (the arg1-type arg1) ...))
</PRE>
</b> <P>
That is, the consequences are undefined if any of the arguments are not of the specified <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A> or the result is not of the specified <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. In particular, if any argument is not of the correct <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>, the result is not guaranteed to be of the specified <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. <P>
Thus, an <A REL=DEFINITION HREF="d_ftype.htm#ftype"><B>ftype</B></A> declaration for a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> describes <A REL=DEFINITION HREF="26_glo_c.htm#call"><I>calls</I></A> to the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A>, not the actual definition of the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A>. <P>
Consider a declaration of the following form: <P>
<PRE>
 (type (function (arg0-type arg1-type ...) val-type) fn-valued-variable)
</PRE>
</b> <P>
This declaration has the interpretation that, within the scope of the declaration, the consequences are unspecified if the value of <b>fn-valued-variable</b> is called with arguments not of the specified <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A>; the value resulting from a valid call will be of type <b>val-type</b>. <P>
As with variable type declarations, nested declarations imply intersections of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A>, as follows: <P><ul><li>*  Consider the following two declarations of <A REL=DEFINITION HREF="d_ftype.htm#ftype"><B>ftype</B></A>: <P></li>
<PRE>
 (ftype (function (arg0-type1 arg1-type1 ...) val-type1) f))
</PRE>
</b> and <P>
<PRE>
 (ftype (function (arg0-type2 arg1-type2 ...) val-type2) f))
</PRE>
</b> <P>
If both these declarations are in effect, then within the shared scope of the declarations, calls to <b>f</b> can be treated as if <b>f</b> were declared as follows: <P>
<PRE>
 (ftype (function ((and arg0-type1 arg0-type2) (and arg1-type1 arg1-type2 ...) ...)
                  (and val-type1 val-type2)) 
        f))
</PRE>
</b> <P>
It is permitted to ignore one or all of the <A REL=DEFINITION HREF="d_ftype.htm#ftype"><B>ftype</B></A> declarations in force. <P>
<li>*  If two (or more) type declarations are in effect for a variable, and they are both <b>function</b> declarations, the declarations combine similarly. <P></li></ul><P>
 <P>
 <P>
<p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss176.htm">FUNCTION-TYPE-ARGUMENT-TYPE-SEMANTICS:RESTRICTIVE</A><LI> <A REL=CHILD HREF="../Issues/iss208.htm">KEYWORD-ARGUMENT-NAME-PACKAGE:ANY</A><LI> <A REL=CHILD HREF="../Issues/iss178.htm">FUNCTION-TYPE-REST-LIST-ELEMENT:USE-ACTUAL-ARGUMENT-TYPE</A><LI> <A REL=CHILD HREF="../Issues/iss177.htm">FUNCTION-TYPE-KEY-NAME:SPECIFY-KEYWORD</A><LI> <A REL=CHILD HREF="../Issues/iss342.htm">SYNTACTIC-ENVIRONMENT-ACCESS:RETRACTED-MAR91</A><LI> <A REL=CHILD HREF="../Issues/iss179.htm">FUNCTION-TYPE:X3J13-MARCH-88</A><P></UL><HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
