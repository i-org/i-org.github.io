<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Section 6.1.2.2</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="06_abaga.htm">
<LINK REL=UP HREF="06_ab.htm">
<LINK REL=NEXT HREF="06_abba.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="06_abaga.htm">◀</A><A REL=UP HREF="06_ab.htm">▲</A><A REL=NEXT HREF="06_abba.htm">▶</A></H1>

<HR>

<H2>
6.1.2.2 Local Variable Initializations</H2> <P>
When a <A REL=DEFINITION HREF="m_loop.htm#loop"><B>loop</B></A> <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A> is executed, the local variables are bound and are initialized to some value. These local variables exist until <A REL=DEFINITION HREF="m_loop.htm#loop"><B>loop</B></A> iteration terminates, at which point they cease to exist. Implicit variables are also established by iteration control clauses and the <b>into</b> preposition of accumulation clauses. <P>
The <b>with</b> construct initializes variables that are local to a loop. The variables are initialized one time only. If the optional <I>type-spec</I> argument is supplied for the variable <I>var</I>, but there is no related expression to be evaluated, <I>var</I> is initialized to an appropriate default value for its <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. For example, for the types <A REL=DEFINITION HREF="t_t.htm#t"><B>t</B></A>, <A REL=DEFINITION HREF="t_number.htm#number"><B>number</B></A>, and <A REL=DEFINITION HREF="t_float.htm#float"><B>float</B></A>, the default values are <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>, <b>0</b>, and <b>0.0</b> respectively. The consequences are undefined if a <I>type-spec</I> argument is supplied for <I>var</I> if the related expression returns a value that is not of the supplied <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. By default, the <b>with</b> construct initializes variables <A REL=DEFINITION HREF="26_glo_s.htm#sequentially"><I>sequentially</I></A>; that is, one variable is assigned a value before the next expression is evaluated. However, by using the <A REL=DEFINITION HREF="26_glo_l.htm#loop_keyword"><I>loop keyword</I></A> <b>and</b> to join several <b>with</b> clauses, initializations can be forced to occur in <A REL=DEFINITION HREF="26_glo_p.htm#parallel"><I>parallel</I></A>; that is, all of the supplied <I>forms</I> are evaluated, and the results are bound to the respective variables simultaneously. <P>
<A REL=DEFINITION HREF="26_glo_s.htm#sequential"><I>Sequential</I></A> <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> is used when it is desireable for the initialization of some variables to depend on the values of previously bound variables. For example, suppose the variables <b>a</b>, <b>b</b>, and <b>c</b> are to be bound in sequence: <P>
<PRE>
 (loop with a = 1 
       with b = (+ a 2) 
       with c = (+ b 3)
       return (list a b c))
=&gt;  (1 3 6)
</PRE>
</b> <P>
The execution of the above <A REL=DEFINITION HREF="m_loop.htm#loop"><B>loop</B></A> is equivalent to the execution of the following code: <P>
 
<PRE>
 (block nil
   (let* ((a 1)
          (b (+ a 2))
          (c (+ b 3)))
     (tagbody
         (next-loop (return (list a b c))
                    (go next-loop)
                    end-loop))))
</PRE>
</b>  <P>
If the values of previously bound variables are not needed for the initialization of other local variables, an <b>and</b> clause can be used to specify that the bindings are to occur in <A REL=DEFINITION HREF="26_glo_p.htm#parallel"><I>parallel</I></A>: <P>
<PRE>
 (loop with a = 1 
       and b = 2 
       and c = 3
       return (list a b c))
=&gt;  (1 2 3)
</PRE>
</b> <P>
The execution of the above loop is equivalent to the execution of the following code: <P>
 
<PRE>
 (block nil
   (let ((a 1)
         (b 2)
         (c 3))
     (tagbody
         (next-loop (return (list a b c))
                    (go next-loop)
                    end-loop))))
</PRE>
</b>  <P>

 
<h2><A REL=CHILD HREF="06_abba.htm">
6.1.2.2.1 Examples of WITH clause</a></h2><p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss223.htm">LOOP-MISCELLANEOUS-REPAIRS:FIX</A><P></UL><HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
