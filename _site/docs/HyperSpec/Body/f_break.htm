<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Function BREAK</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="f_invoke.htm">
<LINK REL=UP HREF="c_condit.htm">
<LINK REL=NEXT HREF="v_debugg.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="f_invoke.htm">◀</A><A REL=UP HREF="c_condit.htm">▲</A><A REL=NEXT HREF="v_debugg.htm">▶</A></H1>

<HR>

<A NAME="break"><I>Function</I> <B>BREAK</B></A> <P>
<p><b>●语法设定:</b><p>
 <P>

<B>break</B> <I><b>&amp;optional</b> format-control <b>&amp;rest</b> format-arguments</I> =&gt; <I><A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A></I><P>
 <P>
<p><b>●参数和值:</b><P>
 <P>
 <I>format-control</I>---a <A REL=DEFINITION HREF="26_glo_f.htm#format_control"><I>format control</I></A>.  The default is <A REL=DEFINITION HREF="26_glo_i.htm#implementation-dependent"><I>implementation-dependent</I></A>. <P>
<I>format-arguments</I>---<A REL=DEFINITION HREF="26_glo_f.htm#format_argument"><I>format arguments</I></A> for the <I>format-control</I>. <P>
<p><b>●详情:</b><P>
 <P>
<A REL=DEFINITION HREF="#break"><B>break</B></A> <A REL=DEFINITION HREF="26_glo_f.htm#format"><I>formats</I></A> <I>format-control</I> and <I>format-arguments</I> and then goes directly into the debugger without allowing any possibility of interception by programmed error-handling facilities. <P>
If the <A REL=DEFINITION HREF="a_contin.htm#continue"><B>continue</B></A> <A REL=DEFINITION HREF="26_glo_r.htm#restart"><I>restart</I></A> is used while in the debugger, <A REL=DEFINITION HREF="#break"><B>break</B></A> immediately returns <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A> without taking any unusual recovery action. <P>
 <A REL=DEFINITION HREF="#break"><B>break</B></A> binds <A REL=DEFINITION HREF="v_debugg.htm#STdebugger-hookST"><B>*debugger-hook*</B></A> to <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A> before attempting to enter the debugger.  <P>
<p><b>●例子:</b><P>
 <P>
<PRE>
 (break &quot;You got here with arguments: ~:S.&quot; '(FOO 37 A))
&gt;&gt;  BREAK: You got here with these arguments: FOO, 37, A.
&gt;&gt;  To continue, type :CONTINUE followed by an option number:
&gt;&gt;   1: Return from BREAK.
&gt;&gt;   2: Top level.
&gt;&gt;  Debug&gt; :CONTINUE 1
&gt;&gt;  Return from BREAK.
=&gt;  NIL
 
</PRE>
</b> <P>
<p><b>●副作用:</b><P>
 <P>
The debugger is entered. <P>
<p><b>●受制于:</b><P>
 <P>
<A REL=DEFINITION HREF="v_debug_.htm#STdebug-ioST"><B>*debug-io*</B></A>. <P>
<p><b>●例外情况：</b> 无。</p>
 <P>
<p><b>●更多信息:</b><P>
 <P>
<A REL=DEFINITION HREF="f_error.htm#error"><B>error</B></A>, <A REL=DEFINITION HREF="f_invoke.htm#invoke-debugger"><B>invoke-debugger</B></A>. <P>
<p><b>●说明:</b><P>
 <P>
<A REL=DEFINITION HREF="#break"><B>break</B></A> is used as a way of inserting temporary debugging ``breakpoints'' in a program, not as a way of signaling errors. For this reason, <A REL=DEFINITION HREF="#break"><B>break</B></A> does not take the <I>continue-format-control</I> <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>argument</I></A> that <A REL=DEFINITION HREF="f_cerror.htm#cerror"><B>cerror</B></A> takes. This and the lack of any possibility of interception by <A REL=DEFINITION HREF="26_glo_c.htm#condition"><I>condition</I></A> <I>handling</I> are the only program-visible differences between <A REL=DEFINITION HREF="#break"><B>break</B></A> and <A REL=DEFINITION HREF="f_cerror.htm#cerror"><B>cerror</B></A>. <P>
The user interface aspects of <A REL=DEFINITION HREF="#break"><B>break</B></A> and <A REL=DEFINITION HREF="f_cerror.htm#cerror"><B>cerror</B></A> are permitted to vary more widely, in order to accomodate the interface needs of the <A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>implementation</I></A>. For example, it is permissible for a <A REL=DEFINITION HREF="26_glo_l.htm#lisp_read-eval-print_loop"><I>Lisp read-eval-print loop</I></A> to be entered by <A REL=DEFINITION HREF="#break"><B>break</B></A> rather than the conventional debugger. <P>
<A REL=DEFINITION HREF="#break"><B>break</B></A> could be defined by: <P>
 
<PRE>
 (defun break (&amp;optional (format-control &quot;Break&quot;) &amp;rest format-arguments)
   (with-simple-restart (continue &quot;Return from BREAK.&quot;)
     (let ((*debugger-hook* nil))
       (invoke-debugger
           (make-condition 'simple-condition
                           :format-control format-control
                           :format-arguments format-arguments))))
   nil)
</PRE>
</b>  <P>
<p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss091.htm">DEBUGGER-HOOK-VS-BREAK:CLARIFY</A><LI> <A REL=CHILD HREF="../Issues/iss170.htm">FORMAT-STRING-ARGUMENTS:SPECIFY</A><P></UL><HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
