<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Special Operator THROW</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="s_tagbod.htm">
<LINK REL=UP HREF="c_data_a.htm">
<LINK REL=NEXT HREF="s_unwind.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A>
<A REL=PREV HREF="s_tagbod.htm">◀</A><A REL=UP HREF="c_data_a.htm">▲</A><A REL=NEXT HREF="s_unwind.htm">▶</A></H1>

<HR>

<A NAME="throw"><I>Special Operator</I> <B>THROW</B></A> <P>
<p><b>●语法设定:</b><p>
 <P>

<B>throw</B> <I>tag result-form</I> =&gt;| <P>
 <P>
<p><b>●参数和值:</b><P>
 <P>
<I>tag</I>---a <A REL=DEFINITION HREF="26_glo_c.htm#catch_tag"><I>catch tag</I></A>; evaluated. <P>
<I>result-form</I>---a <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A>; evaluated as described below. <P>
<p><b>●详情:</b><P>
 <P>
<A REL=DEFINITION HREF="#throw"><B>throw</B></A> causes a non-local control transfer to a <A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A> whose tag is <A REL=DEFINITION HREF="f_eq.htm#eq"><B>eq</B></A> to <I>tag</I>. <P>
<I>Tag</I> is evaluated first to produce an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> called the throw tag; then <I>result-form</I> is evaluated, and its results are saved. If the <I>result-form</I> produces multiple values, then all the values are saved. The most recent outstanding <A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A> whose <I>tag</I> is <A REL=DEFINITION HREF="f_eq.htm#eq"><B>eq</B></A> to the throw tag is exited; the saved results are returned as the value or values of <A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A>. <P>
The transfer of control initiated by <A REL=DEFINITION HREF="#throw"><B>throw</B></A> is performed as described in <A REL HREF="05_b.htm">Section 5.2 (Transfer of Control to an Exit Point)</A>. <P>
<p><b>●例子:</b><P>
 <P>
<PRE>
 (catch 'result
    (setq i 0 j 0)
    (loop (incf j 3) (incf i)
          (if (= i 3) (throw 'result (values i j))))) =&gt;  3, 9

</PRE>
</b> <P>
 
<PRE>
 (catch nil 
   (unwind-protect (throw nil 1)
     (throw nil 2))) =&gt;  2
</PRE>
</b> <P>
The consequences of the following are undefined because the <A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A> of <b>b</b> is passed over by the first <A REL=DEFINITION HREF="#throw"><B>throw</B></A>, hence portable programs must assume that its <A REL=DEFINITION HREF="26_glo_d.htm#dynamic_extent"><I>dynamic extent</I></A> is terminated. The <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> of the <A REL=DEFINITION HREF="26_glo_c.htm#catch_tag"><I>catch tag</I></A> is not yet <I>disestablished</I> and therefore it is the target of the second <A REL=DEFINITION HREF="#throw"><B>throw</B></A>. <P>
<PRE>
 (catch 'a
   (catch 'b
     (unwind-protect (throw 'a 1)
       (throw 'b 2))))
</PRE>
</b> <P>
The following prints ``<b>The inner catch returns :SECOND-THROW</b>'' and then returns <b>:outer-catch</b>. <P>
<PRE>
 (catch 'foo
         (format t &quot;The inner catch returns ~s.~%&quot;
                 (catch 'foo
                     (unwind-protect (throw 'foo :first-throw)
                         (throw 'foo :second-throw))))
         :outer-catch)
&gt;&gt;  The inner catch returns :SECOND-THROW
=&gt;  :OUTER-CATCH
</PRE>
</b> <P>
 <P>
<p><b>●受制于：</b> 无。</p>
 <P>
<p><b>●例外情况：</b><P>
 <P>
If there is no outstanding <A REL=DEFINITION HREF="26_glo_c.htm#catch_tag"><I>catch tag</I></A> that matches the throw tag, no unwinding of the stack is performed, and an error of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="e_contro.htm#control-error"><B>control-error</B></A> is signaled. When the error is signaled, the <A REL=DEFINITION HREF="26_glo_d.htm#dynamic_environment"><I>dynamic environment</I></A> is that which was in force at the point of the <A REL=DEFINITION HREF="#throw"><B>throw</B></A>. <P>
<p><b>●更多信息:</b><P>
 <P>
<A REL=DEFINITION HREF="s_block.htm#block"><B>block</B></A>, <A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A>, <A REL=DEFINITION HREF="s_ret_fr.htm#return-from"><B>return-from</B></A>, <A REL=DEFINITION HREF="s_unwind.htm#unwind-protect"><B>unwind-protect</B></A>, <A REL=CHILD HREF="03_a.htm">Section 3.1 (Evaluation)</A> <P>
<p><b>●说明:</b><P>
 <P>
<A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A> and <A REL=DEFINITION HREF="#throw"><B>throw</B></A> are normally used when the <A REL=DEFINITION HREF="26_glo_e.htm#exit_point"><I>exit point</I></A> must have <A REL=DEFINITION HREF="26_glo_d.htm#dynamic_scope"><I>dynamic scope</I></A> (e.g., the <A REL=DEFINITION HREF="#throw"><B>throw</B></A> is not lexically enclosed by the <A REL=DEFINITION HREF="s_catch.htm#catch"><B>catch</B></A>), while <A REL=DEFINITION HREF="s_block.htm#block"><B>block</B></A> and <A REL=DEFINITION HREF="m_return.htm#return"><B>return</B></A> are used when <A REL=DEFINITION HREF="26_glo_l.htm#lexical_scope"><I>lexical scope</I></A> is sufficient. <P>
<p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss152.htm">EXIT-EXTENT:MINIMAL</A><P></UL><HR>

<a href="../Front/index.htm">【首页】</A><A REL=TOC HREF="../Front/Contents.htm">【章节目录】</A><A REL=INDEX HREF="../Front/X_Master.htm">【内容索引】</A><A REL=INDEX HREF="../Front/X_Symbol.htm">【符号索引】</A><A REL=GLOSSARY HREF="../Body/26_a.htm">【术语表】</A><A HREF="../Issues/I_Categ.htm">【设计文档】</A><BR>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
