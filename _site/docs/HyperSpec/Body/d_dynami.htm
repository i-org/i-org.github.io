<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Declaration DYNAMIC-EXTENT</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="d_ignore.htm">
<LINK REL=UP HREF="c_evalua.htm">
<LINK REL=NEXT HREF="d_type.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="d_ignore.htm">◀</A><A REL=UP HREF="c_evalua.htm">▲</A><A REL=NEXT HREF="d_type.htm">▶</A></H1>

<HR>

<A NAME="dynamic-extent"><I>Declaration</I> <B>DYNAMIC-EXTENT</B></A> <P>
<p><b>●语法设定:</b><p>
 <P>
<b>(dynamic-extent </b>[[<b><I>var</I></b><B>*</B><b> | </b>(<A REL=DEFINITION HREF="a_fn.htm#function"><B>function</B><b></A> <I>fn</I></b>)<b>*</b>]]<b>)</b> <P>
<P><B>Arguments:</B><P>
 <P>
<I>var</I>---a <A REL=DEFINITION HREF="26_glo_v.htm#variable"><I>variable</I></A> <A REL=DEFINITION HREF="26_glo_n.htm#name"><I>name</I></A>. <P>
<I>fn</I>---a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="26_glo_n.htm#name"><I>name</I></A>. <P>
<P><B>Valid Context:</B><P>
 <P>
<A REL=DEFINITION HREF="26_glo_d.htm#declaration"><I>declaration</I></A> <P>
<P><B>Binding Types Affected:</B><P>
 <P>
<A REL=DEFINITION HREF="26_glo_v.htm#variable"><I>variable</I></A>, <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <P>
<p><b>●详情:</b><P>
 <P>
 <P>
In some containing <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A>, <I>F</I>, this declaration asserts for each <I>vari</I> (which need not be bound by <I>F</I>), and for each <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>value</I></A> <I>vij</I> that <I>vari</I> takes on, and for each <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> <I>xijk</I> that is an <A REL=DEFINITION HREF="26_glo_o.htm#otherwise_inaccessible_part"><I>otherwise inaccessible part</I></A> of <I>vij</I> at any time when <I>vij</I> becomes the value of <I>vari</I>, that just after the execution of <I>F</I> terminates, <I>xijk</I> is either <A REL=DEFINITION HREF="26_glo_i.htm#inaccessible"><I>inaccessible</I></A> (if <I>F</I> established a <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> for <I>vari</I>) or still an <A REL=DEFINITION HREF="26_glo_o.htm#otherwise_inaccessible_part"><I>otherwise inaccessible part</I></A> of the current value of <I>vari</I> (if <I>F</I> did not establish a <A 
REL=DEFINITION HREF="26_glo_b.htm#binding"><I>binding</I></A> for <I>vari</I>).  The same relation holds for each <I>fni</I>, except that the <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>bindings</I></A> are in the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="26_glo_n.htm#namespace"><I>namespace</I></A>.  <P>
The compiler is permitted to use this information in any way that is appropriate to the <A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>implementation</I></A> and that does not conflict with the semantics of Common Lisp. <P>
<A REL=DEFINITION HREF="#dynamic-extent"><B>dynamic-extent</B></A> declarations can be <A REL=DEFINITION HREF="26_glo_f.htm#free_declaration"><I>free declarations</I></A> or <A REL=DEFINITION HREF="26_glo_b.htm#bound_declaration"><I>bound declarations</I></A>. <P>
 The <I>vars</I> and <I>fns</I> named in a <A REL=DEFINITION HREF="#dynamic-extent"><B>dynamic-extent</B></A> declaration must not refer to <A REL=DEFINITION HREF="26_glo_s.htm#symbol_macro"><I>symbol macro</I></A> or <A REL=DEFINITION HREF="26_glo_m.htm#macro"><I>macro</I></A> bindings.  <P>
<p><b>●例子:</b><P>
 <P>
Since stack allocation of the initial value entails knowing at the <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>'s creation time that the <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> can be <A REL=DEFINITION HREF="26_glo_s.htm#stack-allocated"><I>stack-allocated</I></A>, it is not generally useful to make a <A REL=DEFINITION HREF="#dynamic-extent"><B>dynamic-extent</B></A> <A REL=DEFINITION HREF="26_glo_d.htm#declaration"><I>declaration</I></A> for <A REL=DEFINITION HREF="26_glo_v.htm#variable"><I>variables</I></A> which have no lexically apparent initial value. For example, it is probably useful to write: <P>
<PRE>
 (defun f ()
   (let ((x (list 1 2 3)))
     (declare (dynamic-extent x))
         ...))
</PRE>
</b> <P>
This would permit those compilers that wish to do so to <A REL=DEFINITION HREF="26_glo_s.htm#stack_allocate"><I>stack allocate</I></A> the list held by the local variable <b>x</b>. It is permissible, but in practice probably not as useful, to write: <P>
<PRE>
 (defun g (x) (declare (dynamic-extent x)) ...)
 (defun f () (g (list 1 2 3)))
</PRE>
</b> <P>
Most compilers would probably not <A REL=DEFINITION HREF="26_glo_s.htm#stack_allocate"><I>stack allocate</I></A> the <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>argument</I></A> to <b>g</b> in <b>f</b> because it would be a modularity violation for the compiler to assume facts about <b>g</b> from within <b>f</b>. Only an implementation that was willing to be responsible for recompiling <b>f</b> if the definition of <b>g</b> changed incompatibly could legitimately <A REL=DEFINITION HREF="26_glo_s.htm#stack_allocate"><I>stack allocate</I></A> the <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> argument to <b>g</b> in <b>f</b>. <P>
Here is another example: <P>
<PRE>
 (declaim (inline g))
 (defun g (x) (declare (dynamic-extent x)) ...)
 (defun f () (g (list 1 2 3)))
 
 (defun f ()
   (flet ((g (x) (declare (dynamic-extent x)) ...))
     (g (list 1 2 3))))
 
</PRE>
</b> In the previous example, some compilers might determine that optimization was possible and others might not. <P>
A variant of this is the so-called ``stack allocated rest list'' that can be achieved (in implementations supporting the optimization) by: <P>
<PRE>
 (defun f (&amp;rest x)
   (declare (dynamic-extent x))
   ...)
</PRE>
</b> <P>
Note that although the initial value of <b>x</b> is not explicit, the <b>f</b> function is responsible for assembling the list <b>x</b> from the passed arguments, so the <b>f</b> function can be optimized by the compiler to construct a <A REL=DEFINITION HREF="26_glo_s.htm#stack-allocated"><I>stack-allocated</I></A> list instead of a heap-allocated list in implementations that support such. <P>
In the following example, <P>
<PRE>
 (let ((x (list 'a1 'b1 'c1))
       (y (cons 'a2 (cons 'b2 (cons 'c2 nil)))))
   (declare (dynamic-extent x y))
   ...)
</PRE>
</b> The <A REL=DEFINITION HREF="26_glo_o.htm#otherwise_inaccessible_part"><I>otherwise inaccessible parts</I></A> of <b>x</b> are three <A REL=DEFINITION HREF="26_glo_c.htm#cons"><I>conses</I></A>, and the <A REL=DEFINITION HREF="26_glo_o.htm#otherwise_inaccessible_part"><I>otherwise inaccessible parts</I></A> of <b>y</b> are three other <A REL=DEFINITION HREF="26_glo_c.htm#cons"><I>conses</I></A>. None of the symbols <b>a1</b>, <b>b1</b>, <b>c1</b>, <b>a2</b>, <b>b2</b>, <b>c2</b>, or <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A> is an <A REL=DEFINITION HREF="26_glo_o.htm#otherwise_inaccessible_part"><I>otherwise inaccessible part</I></A> of <b>x</b> or <b>y</b> because each is <A REL=DEFINITION HREF="26_glo_i.htm#interned"><I>interned</I></A> and hence <A REL=DEFINITION HREF="26_glo_a.htm#accessible"><I>accessible</I></A> by the <A REL=DEFINITION HREF="26_glo_p.htm#package"><I>package</I></A> (or <A REL=DEFINITION HREF="26_glo_p.htm#package"><I>packages</I></A>) in which it is <A REL=DEFINITION 
HREF="26_glo_i.htm#interned"><I>interned</I></A>. However, if a freshly allocated <A REL=DEFINITION HREF="26_glo_u.htm#uninterned"><I>uninterned</I></A> <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> had been used, it would have been an <A REL=DEFINITION HREF="26_glo_o.htm#otherwise_inaccessible_part"><I>otherwise inaccessible part</I></A> of the <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> which contained it. <P>
<PRE>
;; In this example, the implementation is permitted to <A REL=DEFINITION HREF="26_glo_s.htm#stack_allocate">stack allocate</A>
;; the list that is bound to X.
 (let ((x (list 1 2 3)))
   (declare (dynamic-extent x))
   (print x)
   :done)
&gt;&gt;  (1 2 3)
=&gt;  :DONE
 
;; In this example, the list to be bound to L can be <A REL=DEFINITION HREF="26_glo_s.htm#stack-allocated">stack-allocated</A>.
 (defun zap (x y z)
   (do ((l (list x y z) (cdr l)))
       ((null l))
     (declare (dynamic-extent l))
     (prin1 (car l)))) =&gt;  ZAP
 (zap 1 2 3)
&gt;&gt;  123
=&gt;  NIL

;; Some implementations might open-code LIST-ALL-PACKAGES in a way
;; that permits using stack allocation of the list to be bound to L.
 (do ((l (list-all-packages) (cdr l)))
     ((null l))
   (declare (dynamic-extent l))
   (let ((name (package-name (car l))))
     (when (string-search &quot;COMMON-LISP&quot; name) (print name))))
&gt;&gt;  &quot;COMMON-LISP&quot;
&gt;&gt;  &quot;COMMON-LISP-USER&quot;
=&gt;  NIL

;; Some implementations might have the ability to <A REL=DEFINITION HREF="26_glo_s.htm#stack_allocate">stack allocate</A> 
;; rest lists.  A declaration such as the following should be a cue
;; to such implementations that stack-allocation of the rest list
;; would be desirable.
 (defun add (&amp;rest x)
   (declare (dynamic-extent x))
   (apply #'+ x)) =&gt;  ADD
 (add 1 2 3) =&gt;  6

 (defun zap (n m)
   ;; Computes (RANDOM (+ M 1)) at relative speed of roughly O(N).
   ;; It may be slow, but with a good compiler at least it
   ;; doesn't waste much heap storage.  :-}
   (let ((a (make-array n)))
     (declare (dynamic-extent a))
     (dotimes (i n) 
       (declare (dynamic-extent i))
       (setf (aref a i) (random (+ i 1))))
     (aref a m))) =&gt;  ZAP
 (&lt; (zap 5 3) 3) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
</PRE>
</b> <P>
The following are in error, since the value of <b>x</b> is used outside of its <A REL=DEFINITION HREF="26_glo_e.htm#extent"><I>extent</I></A>: <P>
<PRE>
 (length (list (let ((x (list 1 2 3)))  ; Invalid
                (declare (dynamic-extent x))
                x)))

 (progn (let ((x (list 1 2 3)))  ; Invalid
          (declare (dynamic-extent x))
          x)
        nil)
</PRE>
</b>  <P>
<p><b>●更多信息:</b><P>
 <P>
<A REL=DEFINITION HREF="s_declar.htm#declare"><B>declare</B></A> <P>
<p><b>●说明:</b><P>
 <P>
The most common optimization is to <A REL=DEFINITION HREF="26_glo_s.htm#stack_allocate"><I>stack allocate</I></A> the initial value of the <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>objects</I></A> named by the <I>vars</I>. <P>
It is permissible for an implementation to simply ignore this declaration. <P>
<p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss228.htm">MACRO-DECLARATIONS:MAKE-EXPLICIT</A><LI> <A REL=CHILD HREF="../Issues/iss141.htm">DYNAMIC-EXTENT-FUNCTION:EXTEND</A><LI> <A REL=CHILD HREF="../Issues/iss142.htm">DYNAMIC-EXTENT:NEW-DECLARATION</A><P></UL><HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
