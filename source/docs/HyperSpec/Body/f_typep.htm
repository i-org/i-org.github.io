<!DOCTYPE html>
<HTML>
<HEAD><meta http-equiv="content-type" content="text/html; charset=utf-8">
<TITLE>CLHS: Function TYPEP</TITLE>
<LINK HREF="../Data/style.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="f_tp_of.htm">
<LINK REL=UP HREF="c_types_.htm">
<LINK REL=NEXT HREF="e_tp_err.htm">
</HEAD>
<BODY>
<h1><A REL=TOP HREF="../Front/index.htm">《通链参考手册》</A> <A REL=PREV HREF="f_tp_of.htm">◀</A><A REL=UP HREF="c_types_.htm">▲</A><A REL=NEXT HREF="e_tp_err.htm">▶</A></H1>

<HR>

<A NAME="typep"><I>Function</I> <B>TYPEP</B></A> <P>
 <P>
<p><b>●语法设定:</b><p>
 <P>

<B>typep</B> <I>object type-specifier <b>&amp;optional</b> environment</I> =&gt; <I>generalized-boolean</I><P>
 <P>
<p><b>●参数和值:</b><P>
 <P>
<I>object</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<I>type-specifier</I>---any <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> except <A REL=DEFINITION HREF="a_values.htm#values"><B>values</B></A>, or a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> list whose first element is either <A REL=DEFINITION HREF="a_fn.htm#function"><B>function</B></A> or <A REL=DEFINITION HREF="a_values.htm#values"><B>values</B></A>. <P>
<I>environment</I>---an <A REL=DEFINITION HREF="26_glo_e.htm#environment"><I>environment</I></A> <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. The default is <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>, denoting the <A REL=DEFINITION HREF="26_glo_n.htm#null_lexical_environment"><I>null lexical environment</I></A> and the and current <A REL=DEFINITION HREF="26_glo_g.htm#global_environment"><I>global environment</I></A>. <P>
<I>generalized-boolean</I>---a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<p><b>●详情:</b><P>
 <P>
Returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> if <I>object</I> is of the <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> specified by <I>type-specifier</I>; otherwise, returns <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>. <P>
A <I>type-specifier</I> of the form <b>(satisfies fn)</b> is handled by applying the function <b>fn</b> to <I>object</I>. <P>
 <b>(typep </b><I>object</I><b> '(array </b><I>type-specifier</I><b>))</b>, where <I>type-specifier</I> is not <b>*</b>, returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> if and only if <I>object</I> is an <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>array</I></A> that could be the result of supplying <I>type-specifier</I> as the <b>:element-type</b> argument to <A REL=DEFINITION HREF="f_mk_ar.htm#make-array"><B>make-array</B></A>. <b>(array *)</b> refers to all <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>arrays</I></A> regardless of element type, while <b>(array </b><I>type-specifier</I><b>)</b> refers only to those <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>arrays</I></A> that can result from giving <I>type-specifier</I> as the <b>:element-type</b> argument to <A REL=DEFINITION HREF="f_mk_ar.htm#make-array"><B>make-array</B></A>. A similar interpretation applies to <b>(simple-array </b><I>type-specifier</I><b>)</b> and <b>(vector </b><I>type-specifier</I><b>)</b>. See <A REL=CHILD HREF="15_aba.htm">Section 15.1.2.1 (Array Upgrading)</A>. <P>
<b>(typep </b><I>object</I><b> '(complex </b><I>type-specifier</I><b>))</b> returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> for all <A REL=DEFINITION HREF="26_glo_c.htm#complex"><I>complex</I></A> numbers that can result from giving <A REL=DEFINITION HREF="26_glo_n.htm#number"><I>numbers</I></A> of type <I>type-specifier</I> to the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="f_comp_2.htm#complex"><B>complex</B></A>, plus all other <A REL=DEFINITION HREF="26_glo_c.htm#complex"><I>complex</I></A> numbers of the same specialized representation. Both the real and the imaginary parts of any such <A REL=DEFINITION HREF="26_glo_c.htm#complex"><I>complex</I></A> number must satisfy: <P>
<PRE>
 (typep realpart 'type-specifier)
 (typep imagpart 'type-specifier)
</PRE>
</b> <P>
See the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="f_upgrad.htm#upgraded-complex-part-type"><B>upgraded-complex-part-type</B></A>. <P>
 <P>
<p><b>●例子:</b><P>
 <P>
<PRE>
 (typep 12 'integer) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep (1+ most-positive-fixnum) 'fixnum) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (typep nil t) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep nil nil) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (typep 1 '(mod 2)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep #c(1 1) '(complex (eql 1))) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
;; To understand this next example, you might need to refer to
;; <h2><A REL=CHILD HREF="12_aec.htm">Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)</A>.
 (typep #c(0 0) '(complex (eql 0))) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
</PRE>
</b> <P>
 Let <b>A</b>x<b></b> and <b>A</b>y<b></b> be two <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A> that denote different <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A>, but for which <P>
<PRE>
 (upgraded-array-element-type 'Ax)
</PRE>
</b> and <P>
<PRE>
 (upgraded-array-element-type 'Ay)
</PRE>
</b> denote the same <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. Notice that <P>
<PRE>
 (typep (make-array 0 :element-type 'Ax) '(array Ax)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep (make-array 0 :element-type 'Ay) '(array Ay)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep (make-array 0 :element-type 'Ax) '(array Ay)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep (make-array 0 :element-type 'Ay) '(array Ax)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
</PRE>
</b> <P>
 <P>
<p><b>●受制于：</b> 无。</p>
 <P>
<p><b>●例外情况：</b><P>
 <P>
An error of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="e_error.htm#error"><B>error</B></A> is signaled if <I>type-specifier</I> is <b>values</b>, or a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> list whose first element is either <A REL=DEFINITION HREF="a_fn.htm#function"><B>function</B></A> or <A REL=DEFINITION HREF="a_values.htm#values"><B>values</B></A>. <P>
The consequences are undefined if the <I>type-specifier</I> is not a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A>. <P>
<p><b>●更多信息:</b><P>
 <P>
<A REL=DEFINITION HREF="f_tp_of.htm#type-of"><B>type-of</B></A>, <A REL=DEFINITION HREF="f_upgr_1.htm#upgraded-array-element-type"><B>upgraded-array-element-type</B></A>, <A REL=DEFINITION HREF="f_upgrad.htm#upgraded-complex-part-type"><B>upgraded-complex-part-type</B></A>, <h2><A REL=CHILD HREF="04_bc.htm">Section 4.2.3 (Type Specifiers)</A> <P>
<p><b>●说明:</b><P>
 <P>
<A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>Implementations</I></A> are encouraged to recognize and optimize the case of <b>(typep </b><I>x</I><b> (the class </b><I>y</I><b>))</b>, since it does not involve any need for expansion of <A REL=DEFINITION HREF="m_deftp.htm#deftype"><B>deftype</B></A> information at runtime. <P>
<PRE>

</PRE>
</b> <P>
 <P>
<p><hr> <a rel=meta href="../Issues/I_Categ.htm">X3J13设计清单</A><i>非标准部分</i>，可查下面章节：<p><UL><LI> <A REL=CHILD HREF="../Issues/iss015.htm">ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING</A><LI> <A REL=CHILD HREF="../Issues/iss175.htm">FUNCTION-TYPE</A><LI> <A REL=CHILD HREF="../Issues/iss334.htm">SUBTYPEP-ENVIRONMENT:ADD-ARG</A><P></UL><HR>

<a href="../Front/index.htm"> ◇首页 </A> § <a href="../Front/Contents.htm"> ◎章节目录 </a> § <a href="../Front/X_Master.htm"> □内容索引 </a> § <a  href="../Front/X_Symbol.htm"> ○符号索引 </a> § <a href="../Body/26_a.htm"> △术语表 </a> § <a href="../Issues/I_Categ.htm"> ※设计草案 </a><hr>

<div class="footer"><a rel=copyright href="../Front/Help.htm#Legal"><i>2012 此修改版放弃所有版权</i></a></div>
</BODY>
</HTML>
